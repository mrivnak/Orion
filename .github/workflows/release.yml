name: Build Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    permissions:
      contents: write

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install Trunk CLI
        uses: actions-rs/cargo@v1
        with:
          command: binstall
          args: trunk --locked --no-confirm

      - name: Install Tauri CLI
        uses: actions-rs/cargo@v1
        with:
          command: binstall
          args: tauri-cli --locked --no-confirm

      - name: Install Rust nightly-x86_64-pc-windows-msvc
        if: matrix.platform == 'windows-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-pc-windows-msvc
          profile: minimal

      - name: Install Rust nightly-x86_64-apple-darwin
        if: matrix.platform == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-apple-darwin
          profile: minimal

      - name: Install Rust nightly-aarch64-apple-darwin
        if: matrix.platform == 'macos-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-apple-darwin
          profile: minimal

      - name: Install Rust nightly-x86_64-unknown-linux-gnu
        if: matrix.platform == 'ubuntu-latest'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
          profile: minimal

      - name: Install Rust nightly-wasm32-unknown-unknown
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: wasm32-unknown-unknown
          profile: minimal

      - name: Install Ubuntu dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Set Target
        id: set-target
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            echo "target=universal-apple-darwin" >> "$GITHUB_OUTPUT"
            echo "bundles=dmg" >> "$GITHUB_OUTPUT"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            echo "target=x86_64-pc-windows-msvc" >> "$GITHUB_OUTPUT"
            echo "bundles=nsis" >> "$GITHUB_OUTPUT"
          elif [ "$RUNNER_OS" == "Linux" ]; then
            echo "target=x86_64-unknown-linux-gnu" >> "$GITHUB_OUTPUT"
            echo "bundles=deb,appimage" >> "$GITHUB_OUTPUT"
          else
            echo "$RUNNER_OS not supported"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set version
        run: |
          pwsh Set-Version.ps1 ${{ github.ref_name }} ./src-tauri/tauri.conf.json

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: tauri
          args: build -v --ci --target ${{ steps.set-target.outputs.target }} --bundles ${{ steps.set-target.outputs.bundles }}

      - name: Parse Semver
        id: parse-semver
        uses: madhead/semver-utils@1.0.0
        with:
          version: ${{ github.ref_name }}

      - name: Check prerelease
        id: check-prerelease
        run: |
          pip install semver
          python -c "import semver; print('prerelease=true') if semver.Version.parse('${{ github.ref_name }}'.replace('v', '')).prerelease else print('prerelease=false')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          fail_on_unmatched_files: false
          files: |
            ./target/**/release/bundle/deb/*.deb
            ./target/**/release/bundle/appimage/*.AppImage
            ./target/**/release/bundle/nsis/*.exe
            ./target/**/release/bundle/dmg/*.dmg
          prerelease: ${{ steps.check-prerelease.outputs.prerelease }}
          generate_release_notes: true